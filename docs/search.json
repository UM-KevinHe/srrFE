[{"path":"https://um-kevinhe.github.io/srrFE/articles/Models.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"Models","text":"computational tools designed general-purpose model fitting generalized linear models, relying Newton-Raphson Fisher scoring, fall short meeting computational demands number providers increases. limitation arises due substantial escalation computational cost incorporating thousands provider effects parameter space. Consequently, inversion Fisher information matrix becomes computationally burdensome task, posing significant challenge even workstations specifically engineered purposes. address issue, SerBIN algorithm, proposed Wu et al. (2022), leverages block structure Fisher information matrix. innovative approach substantially reduces time complexity associated inverting high-dimensional matrix, particularly confronted presence thousands provider effects. Consider binary outcome illustration. Let \\(m\\) represent total number providers, \\(n_i\\) denote number subjects provider \\(\\) \\((= 1, \\dots, m)\\), \\(N := \\sum_{= 1}^m n_i\\) signify total number records. subject \\(j\\) \\((j = 1, \\dots, n_i)\\) provider \\(\\), let \\(Y_{ij}\\) outcome variable, let \\(Z_{ij}\\) constitute vector risk factors. likelihood function can formulated follows: \\[l(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) \\propto \\sum_{= 1}^m \\sum_{j = 1}^{n_i}\\{Y_{ij} \\cdot (\\gamma_i + Z_{ij}\\boldsymbol{\\beta}) - log(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})\\},\\] corresponding score function can expressed : \\[U(\\gamma_i) = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\}\\] \\[U(\\beta_p) = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\{Z_{ijp} \\cdot (Y_{ij} - \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}})\\}.\\] current context, information matrix can visualized \\(2 \\times 2\\) block matrix, expressed : \\[ (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} (\\boldsymbol{\\gamma}) & (\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})   \\\\   (\\boldsymbol{\\beta}, \\boldsymbol{\\gamma}) & (\\boldsymbol{\\beta})  \\end{pmatrix} \\equiv \\begin{pmatrix} I_{11} & I_{12} \\\\ I_{21} & I_{22}  \\end{pmatrix}.\\] important note \\((\\boldsymbol{\\gamma})\\) block “large” diagonal. Consequently, can compute \\(^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta})\\) follows: \\[^{-1}(\\boldsymbol{\\gamma}, \\boldsymbol{\\beta}) = \\begin{pmatrix} I_{11}^{-1} + {J_1}^{T} S^{-1} J_1 & - {J_2}^{T}   \\\\   - {J_2} &  S^{-1}  \\end{pmatrix},\\] \\(J_1 = I_{21}{I_{11}}^{-1}\\), \\(S = I_{22} - J_1 I_{12}\\), \\(J_2 = S^{-1}J_1\\). bottleneck SerBIN lies computing \\(I_{22}\\) (.e., \\((\\boldsymbol{\\beta})\\)) sample size \\(n\\) exceptionally large. However, element \\(I_{22}\\) can individually computed, allowing parallel computing enhance computational efficiency: \\[(\\boldsymbol{\\beta})_{r,c} = \\langle Z^{(r)}, Z^{(c)} \\circ \\mathbb{P} \\rangle,\\] \\(\\langle , b \\rangle\\) denotes inner product \\(\\) \\(b\\) (.e., \\(^T b\\)), \\(\\circ\\) represents Hadamard product (element-wise product), \\(\\mathbb{P} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{(1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}})^2}\\). ’s worth noting \\((\\boldsymbol{\\beta})\\) symmetric, ’s need calculate upper triangular entries. (avoid instability \\(\\boldsymbol{\\gamma}\\) estimation code, restrict \\({\\hat{\\boldsymbol{\\gamma}}}^{[l]}\\) estimates specific range iteration. default range \\({\\hat{\\boldsymbol{\\gamma}}_{med}}^{[l-1]} \\pm 10\\).)","code":""},{"path":"https://um-kevinhe.github.io/srrFE/articles/Models.html","id":"standardized-ratiorate","dir":"Articles","previous_headings":"","what":"Standardized Ratio/Rate","title":"Models","text":"addition outputs covariate coefficients provider effects, users can use SR_output() function specifying standardization method (“direct” “indirect”) computing provider-level ratio/rate, : Indirect standardization ratio (ISR) computed follows: \\[ISR_i = \\frac{O_i}{E_i},\\] \\(O_i = \\sum_{j = 1}^{n_i} Y_{ij}\\) observed number events provider \\(\\), \\(E_i\\) “expected” number events provider \\(\\), calculated \\(E_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}\\). , \\(\\gamma_0\\) represents “population average”, defaulting median value \\(\\hat{\\gamma}_i\\)’s. context indirect standardization, interpretation \\(E_i\\) can expressed follows: “expected number events provider \\(\\), provider \\(\\) performs national average level?” (see Schaubel. (2014) Jones, Ohlssen, Sprigelhalter. (2008) ). \\(ISR_i >1\\) indicates provider \\(\\)’s observed event rate higher expected based national average. Direct standardization ratio (DSR) determined formula: \\[{DSR}_k = \\frac{E^{(k)}}{O},\\] \\(O = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} Y_{ij}\\), \\(E^{(k)} = \\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\hat{\\gamma}_k + Z_{ij}\\boldsymbol{\\beta}}}\\). context direct standardization, understanding \\(E^{(k)}\\) can articulated follows: “expected number total events, providers performs provider \\(k\\)?”. \\(\\hat{\\gamma}_k = \\infty\\), \\(E^{(k)} = N\\), resulting \\({DSR}_{k} = \\frac{N}{O}\\); \\(\\hat{\\gamma}_k = -\\infty\\), \\(E^{(k)} = 0\\), leading \\({DSR}_{k} = 0\\). Users also option request function generate “standardized rate”, computed \\(ISR_i\\) \\(DSR_k \\times \\frac{O}{N}\\). (Please aware computed “indirect rate” might surpass 100%. prevent confusion, manually constrain result within range 0% 100%.)","code":""},{"path":"https://um-kevinhe.github.io/srrFE/articles/Models.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis Testing","title":"Models","text":"test_fe() function provides hypothesis testing outcomes assist users identifying outlier providers extreme outcomes. default, use median estimated provider effects null value (.e. \\(H_0: \\gamma_i = \\hat{\\gamma}_{med}\\)). Users can choose various testing methods, including “exact.poisbinom” (default), “exact.bootstrap,” “score,” “wald”: “exact.poisbinom”: Assume \\(Y_{ij}|Z_{ij} \\sim Bernoulli(p_{ij})\\). Since within provider \\(\\), \\(p_{ij} = \\frac{e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_i + Z_{ij}\\boldsymbol{\\beta}}}\\) varies, \\(O_i | Z_i = \\sum_{j = 1}^{n_i}Y_{ij}\\) follow Poisson-binomial distribution. calculate probability “getting extreme number \\(O_i\\), \\(H_0: \\gamma_i = \\gamma_0\\) true” based Poisson-binomial distribution. “exact.bootstrap”: test conducted following steps: (1) Repeat \\(B =\\) 10,000 times (default): Simulate \\({Y_{ij}}^{(b)} \\sim Bernoulli(\\frac{e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}}{1 + e^{\\gamma_0 + Z_{ij}\\boldsymbol{\\beta}}})\\), calculate \\({Y_{}}^{(b)} = \\sum_{j = 1}^{n_i} {Y_{ij}}^{(b)}\\). (2) Calculate frequency \\({Y_{}}^{(b)}\\) extreme \\(O_i\\). (3) calculate \\(p-\\)value. (“Exact Bootstrap” consistent “Exact Poisson-binomial”) “wald”: \\(H_0: \\gamma_i = \\gamma_0\\) true, \\(\\frac{\\hat{\\gamma}_i - \\gamma_0}{se(\\hat{\\gamma}_i)} \\sim N(0, 1)\\). \\(se(\\hat{\\gamma}_i)\\) can computed using formula mentioned earlier (\\(I_{11}^{-1} + {J_1}^{T} S^{-1} J_1\\)) diagonal elements. (“Wald test” valid outlying providers (.e. \\(\\hat{\\gamma}_i = \\pm \\infty\\)). “Error message” added code inform users.) “score”: standard score test procedure, first step involves computing “restricted MLE” \\(\\hat{\\boldsymbol{\\beta}}^{()}\\). Subsequently, calculate \\(U(\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{Y_{ij} - \\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}\\}\\), \\((\\gamma_i)|_{\\gamma_i = \\gamma_0} = \\sum_{j = 1}^{n_i} \\{\\frac{e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}}}{(1 + e^{\\gamma_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}^{()}})^2}\\}\\). \\(H_0\\), \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\sim N(0, 1)\\). However, given potentially high dimensionality \\(\\gamma\\), re-fitting new restricted model provider effect test challenging. Therefore, instead using \\(\\hat{\\boldsymbol{\\beta}}^{()}\\), solely employ \\(\\hat{\\boldsymbol{\\beta}}\\) estimated full model.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/articles/Models.html","id":"confidence-interval","dir":"Articles","previous_headings":"","what":"Confidence Interval","title":"Models","text":"choices calculating confidence intervals \\(\\gamma_i\\) include following methods: “exact”: Based Poisson binomial distribution \\(O_i|Z_i\\). numerically find range \\(\\gamma_0\\) \\(P_{exact} \\geq 0.05\\), involves locating roots equation. “wald”: Directly convert \\(\\hat{\\gamma}_i \\pm 1.96 \\times se(\\hat{\\gamma}_i)\\), invalid outlying providers. “score”: Find range \\(\\gamma_0\\) \\(\\frac{U(\\gamma_i)|_{\\gamma_i = \\gamma_0}}{\\sqrt{(\\gamma_i)|_{\\gamma_i = \\gamma_0}}} \\(-1.96, 1.96)\\). can also derive confidence interval \\(ISR_i\\) \\(DSR_i\\) based confidence interval \\(\\gamma_i\\). \\(ISR_i\\): Given score equation provides \\(O_i = \\sum_{j = 1}^{n_i} \\frac{e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\hat{\\gamma}_i + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}\\), CI \\(ISR_i\\) can calculated : \\[CI_{ISR_i} = (\\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}, \\frac{\\sum_{j = 1}^{n_i} \\frac{e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{\\gamma_{,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{E_i}).\\] , \\(\\gamma_{,L}\\) \\(\\gamma_{,U}\\) lower upper bounds \\(\\gamma_i\\). (\\(CI(\\gamma_i)\\) covers \\(\\gamma_0\\), \\(CI_{ISR_i}\\) cover 1.) \\(DSR_k\\): Considering \\(DSR_{0} = \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_0 + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}.\\) CI \\(DSR_k\\) can calculated : \\[CI_{DSR_k} = (\\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,L} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}, \\frac{\\sum_{= 1}^m \\sum_{j = 1}^{n_i} \\frac{e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}{1 + e^{{\\gamma}_{k,U} + Z_{ij}\\hat{\\boldsymbol{\\beta}}}}}{\\sum_{= 1}^m O_i}).\\] Similarly, \\(\\gamma_{k,L}\\) \\(\\gamma_{k,U}\\) lower upper bounds \\(\\gamma_k\\). (\\(CI(\\gamma_k)\\) covers \\(\\gamma_0\\), \\(CI_{DSR_k}\\) cover \\(DSR_k\\).)","code":""},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"1. Data preparation","title":"Quick Start","text":"distinct data sets outcome (Y), covariate matrix (Z), provider identifiers (ID), can directly execute subsequent code data preparation. Otherwise can split data specifying variable names follows:","code":"data.prep <- fe_data_prep(Y, Z, ID) Y.char <- \"Y\" #example variable name for outcome in your dataset Z.char <- c(\"age\", \"gender\", \"edu\", ...) #example variable names for predictors in your dataset ID.char <- \"ID\" #example variable names for provider id in your dataset data.prep <- fe_data_prep(data[, Y.char], data[, Z.char], data[, ID.char]) # \"data\" is the name of your dataset"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"2. Model fitting","title":"Quick Start","text":"","code":"fit <- logis_fe(data.prep)"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"obtain-the-estimate-of-covariate-coefficients-beta-and-provider-effects-gamma","dir":"Articles","previous_headings":"","what":"2.1 Obtain the estimate of covariate coefficients (\\(\\beta\\)) and provider effects (\\(\\gamma\\))","title":"Quick Start","text":"","code":"coef(fit)"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"obtain-the-indirect-standardized-ratiorate","dir":"Articles","previous_headings":"","what":"2.2 Obtain the indirect standardized ratio/rate","title":"Quick Start","text":"","code":"SR <- SR_output(fit)  SR$indirect.ratio SR$indirect.rate"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"testing-to-find-the-outlier-providers","dir":"Articles","previous_headings":"","what":"2.3 Testing to find the outlier providers","title":"Quick Start","text":"","code":"test_fe(fit)"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"obtain-the-confidence-interval-of-gamma","dir":"Articles","previous_headings":"","what":"2.4 Obtain the confidence interval of \\(\\gamma\\)","title":"Quick Start","text":"","code":"confint(fit, option = \"gamma\")"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"obtain-the-confidence-interval-of-indirect-standardized-ratiorate","dir":"Articles","previous_headings":"","what":"2.5 Obtain the confidence interval of indirect standardized ratio/rate","title":"Quick Start","text":"","code":"confint(fit, option = \"SR\")"},{"path":"https://um-kevinhe.github.io/srrFE/articles/Quick-start.html","id":"obtain-the-test-and-confidence-interval-of-beta","dir":"Articles","previous_headings":"","what":"2.6 Obtain the test and confidence interval of \\(\\beta\\)","title":"Quick Start","text":"","code":"summary_fe_covar(fit)"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with srrFE","text":"srrFE software package designed implement SerBIN method proposed Wu et al. (2022), specifically tailored address computational challenges inherent large-scale provider data. Additionally, package equipped functions designed estimate standardized ratios rates conduct hypothesis testing. vignette, explore fundamental usage functions integrated current R package. details, please see Reference section. learn algorithms employed srrFE, refer Models section see original articles. need concise guide quickly use package, please refer Quick Start.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with srrFE","text":"","code":"require(\"devtools\") require(\"remotes\") remotes::install_github(\"UM-KevinHe/srrFE\", ref = \"main\")"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting Started with srrFE","text":"employ simulated dataset contained current package illustrate utilize package data analysis. data named data_FE includes information : Y: binary outcome variable ID: provider identifiers Z: 4 continuous covariates","code":"library(srrFE) data(data_FE)"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"data-preparation-function","dir":"Articles","previous_headings":"Example","what":"Data Preparation Function","title":"Getting Started with srrFE","text":"Typically, users employ fe_data_prep() function preprocess data. advise users review data consider making adjustments based output information necessary. (Please know subsequent functions used based processed data)","code":"data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ... #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ... #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ... #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ... #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) head(data.prep$data) #>    Y ID      Z1      Z2      Z3      Z4 included no.events all.events #> 38 1  1 -0.7124  0.3953 -0.8402  0.0840        1         0          0 #> 6  0  1  0.3660 -0.7654  1.8015 -0.5231        1         0          0 #> 2  0  1 -0.0715  0.3307 -0.1121 -0.3115        1         0          0 #> 32 1  1  1.2804 -0.7822  0.0941  0.7869        1         0          0 #> 34 0  1  0.4012 -0.5114  0.3514 -0.8059        1         0          0 #> 23 0  1  0.8727 -0.7320 -0.2893 -0.0106        1         0          0"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"model-fitting","dir":"Articles","previous_headings":"Example","what":"Model Fitting","title":"Getting Started with srrFE","text":"logis_fe() function employed fit fixed effect model. first three argument positions function, users required supply object generated previous fe_data_prep() function. Users commonly utilize output obtain estimates provider effects covariate coefficients coef() function. firth’s bias-corrected estimate can obtained using logis_firth() function:","code":"fit_fe <- logis_fe(data.prep) coef(fit_fe) #> $gamma #>           gamma #> 1  -0.053509017 #> 2   0.772595018 #> 3  -1.389717213 #> 4   2.517923014 #> 5   0.272975840 #> 6  -0.436788388 #> 7   0.008545775 #> 8   0.304527080 #> 9   1.727970674 #> 10 -0.034881361 #>  #> $beta #>          beta #> Z1 -2.2958595 #> Z2 -1.2672733 #> Z3  0.5674081 #> Z4  3.4980033 fit_firth <- logis_firth(data.prep) coef(fit_firth) #> $gamma #>           gamma #> 1  -0.051239610 #> 2   0.729490799 #> 3  -1.308206549 #> 4   2.367502062 #> 5   0.256940614 #> 6  -0.414020789 #> 7   0.004970661 #> 8   0.292270213 #> 9   1.631117293 #> 10 -0.033041718 #>  #> $beta #>          beta #> Z1 -2.1576804 #> Z2 -1.1906649 #> Z3  0.5328585 #> Z4  3.2847309"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"measures-output","dir":"Articles","previous_headings":"Example","what":"Measures Output","title":"Getting Started with srrFE","text":"Based results obtained fitted model, users can easily calculate direct indirect standardized rates ratios per specific requirements. SR_output() function simply necessitates users input object returned logis_fe() function specify desired type measure. default, indirect standardized rate indirect standardized ratio provided.","code":"SR <- SR_output(fit_fe) SR$indirect.rate #>    Indirect_standardized.rate #> 1                    49.50173 #> 2                    57.42488 #> 3                    35.61848 #> 4                    66.07510 #> 5                    52.93383 #> 6                    46.09943 #> 7                    50.19757 #> 8                    53.10285 #> 9                    62.11370 #> 10                   50.39159 SR$indirect.ratio #>    Indirect_standardized.ratio #> 1                    0.9519563 #> 2                    1.1043247 #> 3                    0.6849708 #> 4                    1.2706751 #> 5                    1.0179583 #> 6                    0.8865274 #> 7                    0.9653378 #> 8                    1.0212087 #> 9                    1.1944943 #> 10                   0.9690691"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"hypothesis-testing-for-provider-effects","dir":"Articles","previous_headings":"Example","what":"Hypothesis Testing for Provider Effects","title":"Getting Started with srrFE","text":"test_fe() function provides hypothesis testing outcomes assist users identifying outlier providers extreme outcomes. function returns 3-column dataframe, “flag” column indicating whether provider flagged (0 denotes provider flagged, 1 -1 represents outlier providers based user’s data interpretation). last two columns contain p-values corresponding test statistics.","code":"test_poisbinom <- test_fe(fit_fe) test_poisbinom #>    flag            p       stat #> 1     0 6.624388e-01 -0.4365486 #> 2     0 1.965498e-01  1.2914439 #> 3    -1 1.264412e-03 -3.2239370 #> 4     1 1.547222e-05  4.3218560 #> 5     0 7.992864e-01  0.2542707 #> 6     0 2.577034e-01 -1.1318361 #> 7     0 7.828967e-01 -0.2755461 #> 8     0 7.678697e-01  0.2951626 #> 9     1 3.317876e-03  2.9366413 #> 10    0 7.044033e-01 -0.3793832"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"hypothesis-testing-for-covariate-coefficients","dir":"Articles","previous_headings":"Example","what":"Hypothesis Testing for Covariate Coefficients","title":"Getting Started with srrFE","text":"Additionally, offer summary_fe_covar() function, provides test statistics covariate coefficients \\(\\beta\\). test statistics can calculated “wald test” (use \"wald.cpp\" \"wald\" option), “score test” (use \"score\" option), “likelihood ratio test” (use \"lr\" option). returned dataframe includes estimates covariate coefficients corresponding p-values. Furthermore, Wald test offers additional confidence intervals.","code":"summary_fe_covar(fit_fe) #>          beta   se.beta            p   CI.lower   CI.upper #> Z1 -2.2958595 0.2559326 2.950020e-19 -2.7974782 -1.7942409 #> Z2 -1.2672733 0.1927867 4.916271e-11 -1.6451282 -0.8894184 #> Z3  0.5674081 0.1744281 1.142086e-03  0.2255353  0.9092810 #> Z4  3.4980033 0.3371212 0.000000e+00  2.8372578  4.1587488"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"confidence-interval-for-provider-effects","dir":"Articles","previous_headings":"Example","what":"Confidence Interval for Provider Effects","title":"Getting Started with srrFE","text":"confint() function can used provide confidence intervals provider effects (.e. \\(\\gamma_i\\)) providers selected tested. User needs explicitly specify option = \"gamma\". Users can choose method generating confidence intervals either \"exact\", \"wald\", \"score\" test. maintain consistency confidence interval (CI) previous test results, advisable use test option test_fe() confint() functions. Please note \"exact\" option test_fe() function corresponds \"exact.poisbinom\" option test_fe() function. returned data frame offers estimates provider effects, upper lower limits CIs (defaulting 95% confidence level sides).","code":"confint(fit_fe, option = \"gamma\") #>           gamma gamma.lower gamma.upper #> 1  -0.053509017  -0.9269014   0.8208674 #> 2   0.772595018  -0.1861332   1.7290101 #> 3  -1.389717213  -2.3996017  -0.4379263 #> 4   2.517923014   1.4561906   3.5755053 #> 5   0.272975840  -0.7196352   1.2802052 #> 6  -0.436788388  -1.4678909   0.5411435 #> 7   0.008545775  -0.9158587   0.9000023 #> 8   0.304527080  -0.7020479   1.3619158 #> 9   1.727970674   0.6661555   2.7870210 #> 10 -0.034881361  -0.9473625   0.8875052"},{"path":"https://um-kevinhe.github.io/srrFE/articles/srrFE.html","id":"confidence-interval-for-measures","dir":"Articles","previous_headings":"Example","what":"Confidence Interval for Measures","title":"Getting Started with srrFE","text":"users interested CIs direct/indirect standardized rates ratios, confint() function can also used purpose explicitly specify option = \"SR\". Additionally, users input object returned logis_fe() function specify desired type measure. default, indirect standardized rate indirect standardized ratio provided. Similarly, function return three-column data frame provides estimate selected measure along corresponding upper lower bounds CIs.","code":"confint(fit_fe, option = \"SR\") #> $CI.indirect_ratio #>    indirect_ratio CI_ratio.lower CI_ratio.upper #> 1       0.9519563      0.7366397      1.1667814 #> 2       1.1043247      0.9460707      1.2635985 #> 3       0.6849708      0.5249067      0.8728793 #> 4       1.2706751      1.1431082      1.3991743 #> 5       1.0179583      0.8787492      1.1516614 #> 6       0.8865274      0.7124129      1.0871900 #> 7       0.9653378      0.7435250      1.2105744 #> 8       1.0212087      0.8785469      1.1463036 #> 9       1.1944943      1.0654148      1.3240740 #> 10      0.9690691      0.8066190      1.1268870 #>  #> $CI.indirect_rate #>    indirect_rate CI_rate.lower CI_rate.upper #> 1       49.50173      38.30527      60.67263 #> 2       57.42488      49.19568      65.70712 #> 3       35.61848      27.29515      45.38972 #> 4       66.07510      59.44163      72.75706 #> 5       52.93383      45.69496      59.88639 #> 6       46.09943      37.04547      56.53388 #> 7       50.19757      38.66330      62.94987 #> 8       53.10285      45.68444      59.60779 #> 9       62.11370      55.40157      68.85185 #> 10      50.39159      41.94419      58.59812"},{"path":"https://um-kevinhe.github.io/srrFE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yubo Shao. Author, maintainer. Wenbo Wu. Author. Kevin . Author. Tao Xu. Contributor.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shao Y, Wu W, K (2024). srrFE: GLM Model Provider Fixed Effects. R package version 1.3, https://github.com/UM-KevinHe/srrFE.","code":"@Manual{,   title = {srrFE: GLM Model with Provider as Fixed Effects},   author = {Yubo Shao and Wenbo Wu and Kevin He},   year = {2024},   note = {R package version 1.3},   url = {https://github.com/UM-KevinHe/srrFE}, }"},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"srrfe","dir":"","previous_headings":"","what":"GLM Model with Provider as Fixed Effects","title":"GLM Model with Provider as Fixed Effects","text":"srrFE software package designed implement SerBIN method proposed Wu et al. (2022), specifically tailored address computational challenges inherent large-scale provider data. Additionally, package equipped functions designed estimate standardized ratios rates conduct hypothesis testing.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"GLM Model with Provider as Fixed Effects","text":"Provider profiling acknowledged utility monitoring healthcare quality, facilitating inter-provider care coordination, enhancing medical cost-effectiveness. Existing methods often use generalized linear models fixed provider effects, especially profiling dialysis facilities. However, number providers increases, computational burden becomes challenging. address issue, introduce serial blockwise inversion Newton (SerBIN) algorithm capitalizes block structure information matrix. Additionally, propose shared-memory divide--conquer algorithm enhance computational efficiency. Beyond computational challenge, current literature lacks suitable inferential approach identifying providers outlier performance, especially cases involving small providers extreme outcomes. Traditional score Wald tests, relying large-sample distributions test statistics, inaccurately approximate small-sample properties context. address inferential gap, present exact test provider effects using exact finite-sample distributions, Poisson-binomial distribution serving special case outcome binary. methodological advancement aims provide accurate reliable assessment provider performance, considering computational inferential challenges.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"GLM Model with Provider as Fixed Effects","text":"install latest development version GitHub:","code":"require(\"devtools\") require(\"remotes\") remotes::install_github(\"UM-KevinHe/srrFE\", ref = \"main\")"},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"GLM Model with Provider as Fixed Effects","text":"See “Getting Started srrFE”","code":""},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"details-of-the-algorithms","dir":"","previous_headings":"","what":"Details of the algorithms","title":"GLM Model with Provider as Fixed Effects","text":"See “Models” original articles","code":""},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"GLM Model with Provider as Fixed Effects","text":"encounter problems bugs, please contact us : ybshao@umich.edu, kevinhe@umich.edu, Wenbo.Wu@nyulangone.org, taoxu@med.umich.edu","code":""},{"path":"https://um-kevinhe.github.io/srrFE/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"GLM Model with Provider as Fixed Effects","text":"Wu, W., Yang, Y., Kang, J., & , K. (2022). Improving large‐scale estimation inference profiling health care providers. Statistics Medicine, 41(15), 2840-2853. , K., Kalbfleisch, J. D., Li, Y., & Li, Y. (2013). Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19, 490-512.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide direct/indirect standardization ratio or rate — SR_output","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"Provide direct/indirect standardization ratio rate","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"","code":"SR_output(   fit,   stdz = \"indirect\",   measure = c(\"rate\", \"ratio\"),   null = \"median\",   Rcpp = TRUE,   threads = 4,   ... )"},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"fit object output logis_fe function. stdz character string specifying standardization method. Defaulting \"indirect\". \"indirect\": using indirect standardized method \"direct\": using direct standardized method measure boolean indicating whether output measure \"ratio\" \"rate\". \"rate\" \"ratio\" provided default. \"rate\": output standardized rate. \"rate\" restricted 0% - 100%. \"ratio\": output standardized ratio. null \"stdz = indirect\", character string real number specifying null hypotheses fixed provider effects calculating standardized rate/ratio. Defaulting \"median\". Rcpp boolean indicating whether use Rcpp. Defaulting TRUE. threads integer specifying number threads use. Defaulting 4. ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"return values depend user's choice standardization method measure type indirect.ratio vector standardization ratio using indirect method direct.ratio vector standardization ratio using direct method indirect.rate vector standardization rate using indirect method direct.rate vector standardization rate using direct method","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"\"stdz\" \"measure\" arguments must explicitly provided. Users allowed specify \"stdz = c(\"indirect\", \"direct\")\" \"measure = c(\"rate\", \"ratio\")\" get multiple measures.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis facilities; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/SR_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide direct/indirect standardization ratio or rate — SR_output","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) SR <- SR_output(fit_fe, stdz = \"direct\", measure = \"rate\") SR$direct.rate #>    Direct_standardized.rate #> 1                  49.27094 #> 2                  56.46127 #> 3                  37.79631 #> 4                  71.31486 #> 5                  52.11158 #> 6                  45.94477 #> 7                  49.81051 #> 8                  52.38627 #> 9                  64.71905 #> 10                 49.43288"},{"path":"https://um-kevinhe.github.io/srrFE/reference/coef.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coefficients from a logis_fe object. — coef.logis_fe","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"Extract coefficients logis_fe object.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/coef.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"","code":"# S3 method for logis_fe coef(fit, ...)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/coef.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"fit object output logis_fe function. ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/coef.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coefficients from a logis_fe object. — coef.logis_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) coef(fit_fe) #> $gamma #>           gamma #> 1  -0.053509017 #> 2   0.772595018 #> 3  -1.389717213 #> 4   2.517923014 #> 5   0.272975840 #> 6  -0.436788388 #> 7   0.008545775 #> 8   0.304527080 #> 9   1.727970674 #> 10 -0.034881361 #>  #> $beta #>          beta #> Z1 -2.2958595 #> Z2 -1.2672733 #> Z3  0.5674081 #> Z4  3.4980033 #>"},{"path":"https://um-kevinhe.github.io/srrFE/reference/confint.logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","title":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","text":"Provide confidence interval provider effects standardization ratios/rates","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/confint.logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","text":"","code":"# S3 method for logis_fe confint(   fit,   parm,   level = 0.95,   test = \"exact\",   option = c(\"gamma\", \"SR\"),   stdz = \"indirect\",   measure = c(\"rate\", \"ratio\") )"},{"path":"https://um-kevinhe.github.io/srrFE/reference/confint.logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","text":"fit object output logis_fe function. parm specify subset providers given confidence intervals. providers included default. level confidence level used constructing confidence intervals. Defaulting 0.95. test character string specifying type testing method. Defaulting \"exact\". \"exact\": exact test \"wald\": wald test \"score\": score test option confidence interval function's output, whether gamma standardization ratios/rates. \"gamma\": provider effect \"SR\": standardization ratios/rates stdz option = 'SR', character string specifying standardization method. Defaulting \"indirect\". \"indirect\": using indirect standardized method \"direct\": using direct standardized method measure option = 'SR', boolean indicating whether output measure \"ratio\" \"rate\". \"rate\" \"ratio\" provided default. \"rate\": output standardized rate. \"rate\" restricted 0% - 100%. \"ratio\":  output standardized ratio ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/confint.logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","text":"dataframe containing point estimate, lower upper bounds estimate.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/confint.logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide confidence interval for provider effects or standardization ratios/rates — confint.logis_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) confint(fit_fe, option = \"gamma\") #>           gamma gamma.lower gamma.upper #> 1  -0.053509017  -0.9269014   0.8208674 #> 2   0.772595018  -0.1861332   1.7290101 #> 3  -1.389717213  -2.3996017  -0.4379263 #> 4   2.517923014   1.4561906   3.5755053 #> 5   0.272975840  -0.7196352   1.2802052 #> 6  -0.436788388  -1.4678909   0.5411435 #> 7   0.008545775  -0.9158587   0.9000023 #> 8   0.304527080  -0.7020479   1.3619158 #> 9   1.727970674   0.6661555   2.7870210 #> 10 -0.034881361  -0.9473625   0.8875052 confint(fit_fe, option = \"SR\") #> $CI.indirect_ratio #>    indirect_ratio CI_ratio.lower CI_ratio.upper #> 1       0.9519563      0.7366397      1.1667814 #> 2       1.1043247      0.9460707      1.2635985 #> 3       0.6849708      0.5249067      0.8728793 #> 4       1.2706751      1.1431082      1.3991743 #> 5       1.0179583      0.8787492      1.1516614 #> 6       0.8865274      0.7124129      1.0871900 #> 7       0.9653378      0.7435250      1.2105744 #> 8       1.0212087      0.8785469      1.1463036 #> 9       1.1944943      1.0654148      1.3240740 #> 10      0.9690691      0.8066190      1.1268870 #>  #> $CI.indirect_rate #>    indirect_rate CI_rate.lower CI_rate.upper #> 1       49.50173      38.30527      60.67263 #> 2       57.42488      49.19568      65.70712 #> 3       35.61848      27.29515      45.38972 #> 4       66.07510      59.44163      72.75706 #> 5       52.93383      45.69496      59.88639 #> 6       46.09943      37.04547      56.53388 #> 7       50.19757      38.66330      62.94987 #> 8       53.10285      45.68444      59.60779 #> 9       62.11370      55.40157      68.85185 #> 10      50.39159      41.94419      58.59812 #>"},{"path":"https://um-kevinhe.github.io/srrFE/reference/data_FE.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset — data_FE","title":"Example dataset — data_FE","text":"simulated data set containing response variable, provider information 4 continuous covariates.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/data_FE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset — data_FE","text":"","code":"data(data_FE)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/data_FE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset — data_FE","text":"list containing following elements: Y vector represents binary outcome ID vector represents facility indicator (10 facilities total) Z data frame contains 4 continuous variables","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/data_FE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dataset — data_FE","text":"","code":"data(data_FE) head(data_FE$Y) #> [1] 1 0 1 0 0 1 head(data_FE$ID) #> [1] 3 3 5 3 7 9 head(data_FE$Z) #>          Z1     Z2      Z3      Z4 #> 129 -1.0518 0.4805  1.1374  1.3395 #> 107 -1.0696 0.0053 -0.4353 -0.5918 #> 237 -0.6108 0.1098 -0.5248  1.4689 #> 131 -0.4967 0.9972  0.5019  0.3900 #> 331  1.5710 2.1165 -0.0759 -0.7802 #> 437 -1.1156 2.2503  0.1843  0.7020"},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Data preparation before modelling — fe_data_prep","title":"Data preparation before modelling — fe_data_prep","text":"Data preparation modelling","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data preparation before modelling — fe_data_prep","text":"","code":"fe_data_prep(Y, Z, ID, cutoff = 10, check = TRUE, message = TRUE)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data preparation before modelling — fe_data_prep","text":"Y numerical vector, values 0 1, indicating outcome variable. Z matrix data frame containing covariates. ID vector representing provider id. elements can either numeric values characters. cutoff integer cutoff provider size 10 default. Providers observations fewer \"cutoff\" value labeled \"include = 0\". check Boolean indicating whether checking missingness, variation, correlation VIF variables data. Defaulting \"TRUE\". message Boolean indicating whether printing information data preparation process. Defaulting \"TRUE\". ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data preparation before modelling — fe_data_prep","text":"data sorted data frame including response, provider identifiers, covariates, additional provider information. char_list list including variable names.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data preparation before modelling — fe_data_prep","text":"Major steps stage include (order): checking missingness, variation, correlation VIF variables data, provider screening based provider size, 10 default, reporting proportions providers events (.e. \"0\" outcomes) events (.e. \"1\" outcomes), sorting data provider identifiers. fe_data_prep() function returns data sorted provider identifiers, accompanied additional provider-related information indicating whether provider's size exceeds specified \"cutoff\" whether respective provider experienced either zero events. reason behind introducing \"cutoff\" lies findings simulated real data studies, revealing instability coefficient estimates providers small sizes. Consequently, recommend excluding small providers model fitting process. important note resultant data frame retains providers, including small ones, utilizes \"included = 0\" label signify small providers. Subsequently, model fitting stage, logis_fe() function disregards records marked \"included = 0\".","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/fe_data_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data preparation before modelling — fe_data_prep","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ...  #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ...  #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ...  #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ...  #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) head(data.prep$data) #>    Y ID      Z1      Z2      Z3      Z4 included no.events all.events #> 38 1  1 -0.7124  0.3953 -0.8402  0.0840        1         0          0 #> 6  0  1  0.3660 -0.7654  1.8015 -0.5231        1         0          0 #> 2  0  1 -0.0715  0.3307 -0.1121 -0.3115        1         0          0 #> 32 1  1  1.2804 -0.7822  0.0941  0.7869        1         0          0 #> 34 0  1  0.4012 -0.5114  0.3514 -0.8059        1         0          0 #> 23 0  1  0.8727 -0.7320 -0.2893 -0.0106        1         0          0 data.prep$char_list #> $Y.char #> [1] \"Y\" #>  #> $prov.char #> [1] \"ID\" #>  #> $Z.char #> [1] \"Z1\" \"Z2\" \"Z3\" \"Z4\" #>"},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for fitting fixed effects model — logis_fe","title":"Main function for fitting fixed effects model — logis_fe","text":"Main function fitting fixed effects model","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for fitting fixed effects model — logis_fe","text":"","code":"logis_fe(   data.prep,   algorithm = \"SerBIN\",   max.iter = 10000,   tol = 1e-05,   bound = 10,   backtrack = TRUE,   Rcpp = TRUE,   AUC = FALSE,   message = FALSE )"},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for fitting fixed effects model — logis_fe","text":"data.prep object fe_data_prep() function. algorithm string specifying algorithm used. Defaulting \"SerBIN\". \"SerBIN\": using Serial blockwise inversion Newton algorithm fit model (See Wu et al. (2022)). \"BAN\": using block ascent Newton algorithm fit model (See et al. (2013)). max.iter maximum number iterations. Defaulting 10,000. tol small positive number specifying stopping criterion Newton-Raphson algorithm. Defaulting 1e-5. bound positive number avoid inflation provider effect. Defaulting 10. backtrack boolean indicating whether backtracking line search implemented. Defaulting FALSE. Rcpp Boolean indicating whether Rcpp function used. Defaulting TRUE. AUC Boolean indicating whether report AUC. Defaulting FALSE. message Boolean indicating whether track fitting process. Defaulting TRUE. ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for fitting fixed effects model — logis_fe","text":"object S3 class logis_fe. beta vector fixed effects estimates covariates gamma vector estimates provider effects obs vector patients-level outcome neg2Loglkd minus two times log likelihood AIC Akaike info criterion BIC Bayesian info criterion AUC area ROC curve","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for fitting fixed effects model — logis_fe","text":"default algorithm based Serial blockwise inversion Newton (SerBIN) proposed Wu et al. (2022), users can also choose use block ascent Newton (BAN) algorithm proposed et al. (2013) fit model. methodologies build upon Newton-Raphson method, yet SerBIN simultaneously updates provider effect covariate coefficient. concurrent update necessitates inversion complete information matrix iteration. contrast, BAN adopts two-layer updating approach, covariate coefficient sequentially fixed update provider effect, followed fixing provider effect update covariate coefficient. suggest using default \"SerBIN\" option typically converges much faster datasets. However, rare cases SerBIN algorithm encounters second-order derivative irreversibility leading error, users can consider using \"BAN\" option alternative. deeper understanding, please consult original article detailed insights.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for fitting fixed effects model — logis_fe","text":"Wu, W, Yang, Y, Kang, J, , K. (2022) Improving large-scale estimation inference profiling health care providers. Statistics Medicine, 41(15): 2840-2853. K, Kalbfleisch, J, Li, Y, et al. (2013) Evaluating hospital readmission rates dialysis providers; adjusting hospital effects. Lifetime Data Analysis, 19: 490-512.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for fitting fixed effects model — logis_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ...  #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ...  #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ...  #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ...  #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) fit_fe <- logis_fe(data.prep)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_firth.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"Main function fitting fixed effects model firth's bias correction","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_firth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"","code":"logis_firth(   data.prep,   max.iter = 10000,   tol = 1e-05,   bound = 10,   backtrack = TRUE,   Rcpp = TRUE,   AUC = FALSE,   message = FALSE )"},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_firth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"data.prep object fe_data_prep() function. max.iter maximum number iterations. Defaulting 10,000. tol small positive number specifying stopping criterion Newton-Raphson algorithm. Defaulting 1e-5. bound positive number avoid inflation provider effect. Defaulting 10. backtrack boolean indicating whether backtracking line search implemented. Defaulting FALSE. Rcpp Boolean indicating whether Rcpp function used. Defaulting TRUE. AUC Boolean indicating whether report AUC. Defaulting FALSE. message Boolean indicating whether track fitting process. Defaulting TRUE. ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_firth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"object S3 class logis_fe. beta vector fixed effects estimates covariates gamma vector estimates provider effects obs vector patients-level outcome neg2Loglkd minus two times log likelihood AIC Akaike info criterion BIC Bayesian info criterion AUC area ROC curve","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/logis_firth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for fitting fixed effects model with firth's bias correction — logis_firth","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID) #> Checking missingness of variables ...  #> Missing values NOT found. Checking missingness of variables completed! #> Checking variation in covariates ...  #> Checking variation in covariates completed! #> Checking pairwise correlation among covariates ...  #> Checking pairwise correlation among covariates completed! #> Checking VIF of covariates ...  #> Checking VIF of covariates completed! #> Warning: 0 out of 10 providers considered small and filtered out! #> 0 out of 10 remaining providers with no events. #> 0 out of 10 remaining providers with all events. #> After screening, 52% of all records exhibit occurrences of events (Y = 1) fit_firth <- logis_firth(data.prep)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/summary_fe_covar.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide the summary statistics for covariate estimates — summary_fe_covar","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"Provide summary statistics covariate estimates","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/summary_fe_covar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"","code":"summary_fe_covar(fit, parm, level = 0.95, test = \"wald.cpp\", null = 0)"},{"path":"https://um-kevinhe.github.io/srrFE/reference/summary_fe_covar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"fit object output logis_fe function. parm character vector specifies subset covariates. covariates included default. level confidence level used constructing confidence intervals. Defaulting 0.95. test character string specifying type testing method. Defaulting \"wald.cpp\". \"wald\": wald test \"wald.cpp\": wald test using cpp function \"lr\": likelihood ratio test \"score\": score test null null value covariate estimate requires testing. (e.g. test \\(H_0: \\beta = 0\\)) ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/summary_fe_covar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"dataframe containing summary statistics covariate estimates","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/summary_fe_covar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide the summary statistics for covariate estimates — summary_fe_covar","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) summary.wald.cpp <- summary_fe_covar(fit_fe, level = 0.95, test = \"wald\") summary.wald.cpp #>          beta   se.beta            p   CI.lower   CI.upper #> Z1 -2.2958595 0.2559326 0.000000e+00 -2.7974782 -1.7942409 #> Z2 -1.2672733 0.1927867 4.916267e-11 -1.6451282 -0.8894184 #> Z3  0.5674081 0.1744281 1.142086e-03  0.2255353  0.9092810 #> Z4  3.4980033 0.3371212 3.185274e-25  2.8372578  4.1587488"},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct hypothesis testing for identifying outlying providers — test_fe","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"Conduct hypothesis testing identifying outlying providers","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"","code":"test_fe(   fit,   parm,   level = 0.95,   test = \"exact.poisbinom\",   null = \"median\",   saddlepoint = FALSE,   n = 10000,   threads = 4 )"},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"fit object output logis_fe function. parm specify subset providers given confidence intervals. providers included default. level confidence level used constructing confidence intervals. Defaulting 0.95. test character string specifying type testing method conducted. Defaulting \"exact.poisbinom\". \"exact.poisbinom\": two-sided exact test based Poisson-binomial distribution \\(O_i|Z_i\\) \"exact.bootstrap\": two-sided exact test based bootstrap procedure \"wald\": wald test \"score\": score test \"modified.score\": modified score test null character string real number specifying null hypotheses fixed provider effects. saddlepoint test = \"score\", logical indicating whether use saddlepoint approximation score test. Defaulting FALSE. n resample size bootstrapping. Defaulting 10,000. threads integer specifying number threads use. Defaulting 4. ...","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"dataframe containing: flag vector flagging indicator. \"1\" means statistically higher expected, \"-1\" means statistically lower expected p p-value stat z-score","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"default, function uses \"exact.poisbinom\" method. wald test invalid extreme providers (.e. provider effect goes infinity).","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"Wu, W, Yang, Y, Kang, J, , K. (2022) Improving large-scale estimation inference profiling health care providers. Statistics Medicine, 41(15): 2840-2853.","code":""},{"path":"https://um-kevinhe.github.io/srrFE/reference/test_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct hypothesis testing for identifying outlying providers — test_fe","text":"","code":"data(data_FE) data.prep <- fe_data_prep(data_FE$Y, data_FE$Z, data_FE$ID, message = FALSE) fit_fe <- logis_fe(data.prep) test_fe(fit_fe, test = \"score\", saddlepoint = T, parm = c(1, 3, 5, 6)) #>   flag           p       stat #> 1    0 0.657329301 -0.4436035 #> 3   -1 0.001052562 -3.2760869 #> 5    0 0.795164163  0.2596106 #> 6    0 0.248123105 -1.1549202"}]
